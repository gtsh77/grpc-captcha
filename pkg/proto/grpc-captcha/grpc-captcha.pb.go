// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.28.1
// 	protoc        v3.12.4
// source: grpc-captcha.proto

package grpc_captcha

import (
	empty "github.com/golang/protobuf/ptypes/empty"
	timestamp "github.com/golang/protobuf/ptypes/timestamp"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type VerifyCaptchaRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id  string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Otp string `protobuf:"bytes,2,opt,name=otp,proto3" json:"otp,omitempty"`
}

func (x *VerifyCaptchaRequest) Reset() {
	*x = VerifyCaptchaRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_grpc_captcha_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *VerifyCaptchaRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VerifyCaptchaRequest) ProtoMessage() {}

func (x *VerifyCaptchaRequest) ProtoReflect() protoreflect.Message {
	mi := &file_grpc_captcha_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VerifyCaptchaRequest.ProtoReflect.Descriptor instead.
func (*VerifyCaptchaRequest) Descriptor() ([]byte, []int) {
	return file_grpc_captcha_proto_rawDescGZIP(), []int{0}
}

func (x *VerifyCaptchaRequest) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *VerifyCaptchaRequest) GetOtp() string {
	if x != nil {
		return x.Otp
	}
	return ""
}

type CaptchaResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id         string               `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Data       string               `protobuf:"bytes,2,opt,name=data,proto3" json:"data,omitempty"`
	ExpriresAt *timestamp.Timestamp `protobuf:"bytes,3,opt,name=exprires_at,json=expriresAt,proto3" json:"exprires_at,omitempty"`
	DevOtp     string               `protobuf:"bytes,4,opt,name=dev_otp,json=devOtp,proto3" json:"dev_otp,omitempty"`
}

func (x *CaptchaResponse) Reset() {
	*x = CaptchaResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_grpc_captcha_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CaptchaResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CaptchaResponse) ProtoMessage() {}

func (x *CaptchaResponse) ProtoReflect() protoreflect.Message {
	mi := &file_grpc_captcha_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CaptchaResponse.ProtoReflect.Descriptor instead.
func (*CaptchaResponse) Descriptor() ([]byte, []int) {
	return file_grpc_captcha_proto_rawDescGZIP(), []int{1}
}

func (x *CaptchaResponse) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *CaptchaResponse) GetData() string {
	if x != nil {
		return x.Data
	}
	return ""
}

func (x *CaptchaResponse) GetExpriresAt() *timestamp.Timestamp {
	if x != nil {
		return x.ExpriresAt
	}
	return nil
}

func (x *CaptchaResponse) GetDevOtp() string {
	if x != nil {
		return x.DevOtp
	}
	return ""
}

var File_grpc_captcha_proto protoreflect.FileDescriptor

var file_grpc_captcha_proto_rawDesc = []byte{
	0x0a, 0x12, 0x67, 0x72, 0x70, 0x63, 0x2d, 0x63, 0x61, 0x70, 0x74, 0x63, 0x68, 0x61, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x12, 0x11, 0x77, 0x65, 0x72, 0x6b, 0x73, 0x74, 0x61, 0x74, 0x74, 0x2e,
	0x63, 0x61, 0x70, 0x74, 0x63, 0x68, 0x61, 0x1a, 0x1b, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x65, 0x6d, 0x70, 0x74, 0x79, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1f, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x38, 0x0a, 0x14, 0x56, 0x65, 0x72, 0x69, 0x66, 0x79, 0x43,
	0x61, 0x70, 0x74, 0x63, 0x68, 0x61, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x0e, 0x0a,
	0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x10, 0x0a,
	0x03, 0x6f, 0x74, 0x70, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6f, 0x74, 0x70, 0x22,
	0x8b, 0x01, 0x0a, 0x0f, 0x43, 0x61, 0x70, 0x74, 0x63, 0x68, 0x61, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x02, 0x69, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x12, 0x3b, 0x0a, 0x0b, 0x65, 0x78, 0x70, 0x72, 0x69,
	0x72, 0x65, 0x73, 0x5f, 0x61, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54,
	0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x0a, 0x65, 0x78, 0x70, 0x72, 0x69, 0x72,
	0x65, 0x73, 0x41, 0x74, 0x12, 0x17, 0x0a, 0x07, 0x64, 0x65, 0x76, 0x5f, 0x6f, 0x74, 0x70, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x64, 0x65, 0x76, 0x4f, 0x74, 0x70, 0x32, 0xa7, 0x01,
	0x0a, 0x0e, 0x43, 0x61, 0x70, 0x74, 0x63, 0x68, 0x61, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65,
	0x12, 0x48, 0x0a, 0x08, 0x47, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x74, 0x65, 0x12, 0x16, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45,
	0x6d, 0x70, 0x74, 0x79, 0x1a, 0x22, 0x2e, 0x77, 0x65, 0x72, 0x6b, 0x73, 0x74, 0x61, 0x74, 0x74,
	0x2e, 0x63, 0x61, 0x70, 0x74, 0x63, 0x68, 0x61, 0x2e, 0x43, 0x61, 0x70, 0x74, 0x63, 0x68, 0x61,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x4b, 0x0a, 0x06, 0x56, 0x65,
	0x72, 0x69, 0x66, 0x79, 0x12, 0x27, 0x2e, 0x77, 0x65, 0x72, 0x6b, 0x73, 0x74, 0x61, 0x74, 0x74,
	0x2e, 0x63, 0x61, 0x70, 0x74, 0x63, 0x68, 0x61, 0x2e, 0x56, 0x65, 0x72, 0x69, 0x66, 0x79, 0x43,
	0x61, 0x70, 0x74, 0x63, 0x68, 0x61, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x16, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e,
	0x45, 0x6d, 0x70, 0x74, 0x79, 0x22, 0x00, 0x42, 0x40, 0x5a, 0x3e, 0x67, 0x69, 0x74, 0x6c, 0x61,
	0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x67, 0x74, 0x73, 0x68, 0x37, 0x37, 0x2d, 0x77, 0x6f, 0x72,
	0x6b, 0x73, 0x68, 0x6f, 0x70, 0x2f, 0x67, 0x72, 0x70, 0x63, 0x2d, 0x63, 0x61, 0x70, 0x74, 0x63,
	0x68, 0x61, 0x2f, 0x70, 0x6b, 0x67, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x67, 0x72, 0x70,
	0x63, 0x2d, 0x63, 0x61, 0x70, 0x74, 0x63, 0x68, 0x61, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x33,
}

var (
	file_grpc_captcha_proto_rawDescOnce sync.Once
	file_grpc_captcha_proto_rawDescData = file_grpc_captcha_proto_rawDesc
)

func file_grpc_captcha_proto_rawDescGZIP() []byte {
	file_grpc_captcha_proto_rawDescOnce.Do(func() {
		file_grpc_captcha_proto_rawDescData = protoimpl.X.CompressGZIP(file_grpc_captcha_proto_rawDescData)
	})
	return file_grpc_captcha_proto_rawDescData
}

var file_grpc_captcha_proto_msgTypes = make([]protoimpl.MessageInfo, 2)
var file_grpc_captcha_proto_goTypes = []interface{}{
	(*VerifyCaptchaRequest)(nil), // 0: werkstatt.captcha.VerifyCaptchaRequest
	(*CaptchaResponse)(nil),      // 1: werkstatt.captcha.CaptchaResponse
	(*timestamp.Timestamp)(nil),  // 2: google.protobuf.Timestamp
	(*empty.Empty)(nil),          // 3: google.protobuf.Empty
}
var file_grpc_captcha_proto_depIdxs = []int32{
	2, // 0: werkstatt.captcha.CaptchaResponse.exprires_at:type_name -> google.protobuf.Timestamp
	3, // 1: werkstatt.captcha.CaptchaService.Generate:input_type -> google.protobuf.Empty
	0, // 2: werkstatt.captcha.CaptchaService.Verify:input_type -> werkstatt.captcha.VerifyCaptchaRequest
	1, // 3: werkstatt.captcha.CaptchaService.Generate:output_type -> werkstatt.captcha.CaptchaResponse
	3, // 4: werkstatt.captcha.CaptchaService.Verify:output_type -> google.protobuf.Empty
	3, // [3:5] is the sub-list for method output_type
	1, // [1:3] is the sub-list for method input_type
	1, // [1:1] is the sub-list for extension type_name
	1, // [1:1] is the sub-list for extension extendee
	0, // [0:1] is the sub-list for field type_name
}

func init() { file_grpc_captcha_proto_init() }
func file_grpc_captcha_proto_init() {
	if File_grpc_captcha_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_grpc_captcha_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*VerifyCaptchaRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_grpc_captcha_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CaptchaResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_grpc_captcha_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   2,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_grpc_captcha_proto_goTypes,
		DependencyIndexes: file_grpc_captcha_proto_depIdxs,
		MessageInfos:      file_grpc_captcha_proto_msgTypes,
	}.Build()
	File_grpc_captcha_proto = out.File
	file_grpc_captcha_proto_rawDesc = nil
	file_grpc_captcha_proto_goTypes = nil
	file_grpc_captcha_proto_depIdxs = nil
}
